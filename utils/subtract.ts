import { Compare } from "./compare";
import { Digit, DropLeadingZero, DropLeadingZeroDigits, Join, ToDigits } from "./digit";

type SubtractorTable = {
  // A-B-C = [Carry, Diff]
  "000": ["0", "0"];
  "010": ["1", "9"];
  "020": ["1", "8"];
  "030": ["1", "7"];
  "040": ["1", "6"];
  "050": ["1", "5"];
  "060": ["1", "4"];
  "070": ["1", "3"];
  "080": ["1", "2"];
  "090": ["1", "1"];
  "100": ["0", "1"];
  "110": ["0", "0"];
  "120": ["1", "9"];
  "130": ["1", "8"];
  "140": ["1", "7"];
  "150": ["1", "6"];
  "160": ["1", "5"];
  "170": ["1", "4"];
  "180": ["1", "3"];
  "190": ["1", "2"];
  "200": ["0", "2"];
  "210": ["0", "1"];
  "220": ["0", "0"];
  "230": ["1", "9"];
  "240": ["1", "8"];
  "250": ["1", "7"];
  "260": ["1", "6"];
  "270": ["1", "5"];
  "280": ["1", "4"];
  "290": ["1", "3"];
  "300": ["0", "3"];
  "310": ["0", "2"];
  "320": ["0", "1"];
  "330": ["0", "0"];
  "340": ["1", "9"];
  "350": ["1", "8"];
  "360": ["1", "7"];
  "370": ["1", "6"];
  "380": ["1", "5"];
  "390": ["1", "4"];
  "400": ["0", "4"];
  "410": ["0", "3"];
  "420": ["0", "2"];
  "430": ["0", "1"];
  "440": ["0", "0"];
  "450": ["1", "9"];
  "460": ["1", "8"];
  "470": ["1", "7"];
  "480": ["1", "6"];
  "490": ["1", "5"];
  "500": ["0", "5"];
  "510": ["0", "4"];
  "520": ["0", "3"];
  "530": ["0", "2"];
  "540": ["0", "1"];
  "550": ["0", "0"];
  "560": ["1", "9"];
  "570": ["1", "8"];
  "580": ["1", "7"];
  "590": ["1", "6"];
  "600": ["0", "6"];
  "610": ["0", "5"];
  "620": ["0", "4"];
  "630": ["0", "3"];
  "640": ["0", "2"];
  "650": ["0", "1"];
  "660": ["0", "0"];
  "670": ["1", "9"];
  "680": ["1", "8"];
  "690": ["1", "7"];
  "700": ["0", "7"];
  "710": ["0", "6"];
  "720": ["0", "5"];
  "730": ["0", "4"];
  "740": ["0", "3"];
  "750": ["0", "2"];
  "760": ["0", "1"];
  "770": ["0", "0"];
  "780": ["1", "9"];
  "790": ["1", "8"];
  "800": ["0", "8"];
  "810": ["0", "7"];
  "820": ["0", "6"];
  "830": ["0", "5"];
  "840": ["0", "4"];
  "850": ["0", "3"];
  "860": ["0", "2"];
  "870": ["0", "1"];
  "880": ["0", "0"];
  "890": ["1", "9"];
  "900": ["0", "9"];
  "910": ["0", "8"];
  "920": ["0", "7"];
  "930": ["0", "6"];
  "940": ["0", "5"];
  "950": ["0", "4"];
  "960": ["0", "3"];
  "970": ["0", "2"];
  "980": ["0", "1"];
  "990": ["0", "0"];
  "001": ["1", "9"];
  "011": ["1", "8"];
  "021": ["1", "7"];
  "031": ["1", "6"];
  "041": ["1", "5"];
  "051": ["1", "4"];
  "061": ["1", "3"];
  "071": ["1", "2"];
  "081": ["1", "1"];
  "091": ["1", "0"];
  "101": ["0", "0"];
  "111": ["1", "9"];
  "121": ["1", "8"];
  "131": ["1", "7"];
  "141": ["1", "6"];
  "151": ["1", "5"];
  "161": ["1", "4"];
  "171": ["1", "3"];
  "181": ["1", "2"];
  "191": ["1", "1"];
  "201": ["0", "1"];
  "211": ["0", "0"];
  "221": ["1", "9"];
  "231": ["1", "8"];
  "241": ["1", "7"];
  "251": ["1", "6"];
  "261": ["1", "5"];
  "271": ["1", "4"];
  "281": ["1", "3"];
  "291": ["1", "2"];
  "301": ["0", "2"];
  "311": ["0", "1"];
  "321": ["0", "0"];
  "331": ["1", "9"];
  "341": ["1", "8"];
  "351": ["1", "7"];
  "361": ["1", "6"];
  "371": ["1", "5"];
  "381": ["1", "4"];
  "391": ["1", "3"];
  "401": ["0", "3"];
  "411": ["0", "2"];
  "421": ["0", "1"];
  "431": ["0", "0"];
  "441": ["1", "9"];
  "451": ["1", "8"];
  "461": ["1", "7"];
  "471": ["1", "6"];
  "481": ["1", "5"];
  "491": ["1", "4"];
  "501": ["0", "4"];
  "511": ["0", "3"];
  "521": ["0", "2"];
  "531": ["0", "1"];
  "541": ["0", "0"];
  "551": ["1", "9"];
  "561": ["1", "8"];
  "571": ["1", "7"];
  "581": ["1", "6"];
  "591": ["1", "5"];
  "601": ["0", "5"];
  "611": ["0", "4"];
  "621": ["0", "3"];
  "631": ["0", "2"];
  "641": ["0", "1"];
  "651": ["0", "0"];
  "661": ["1", "9"];
  "671": ["1", "8"];
  "681": ["1", "7"];
  "691": ["1", "6"];
  "701": ["0", "6"];
  "711": ["0", "5"];
  "721": ["0", "4"];
  "731": ["0", "3"];
  "741": ["0", "2"];
  "751": ["0", "1"];
  "761": ["0", "0"];
  "771": ["1", "9"];
  "781": ["1", "8"];
  "791": ["1", "7"];
  "801": ["0", "7"];
  "811": ["0", "6"];
  "821": ["0", "5"];
  "831": ["0", "4"];
  "841": ["0", "3"];
  "851": ["0", "2"];
  "861": ["0", "1"];
  "871": ["0", "0"];
  "881": ["1", "9"];
  "891": ["1", "8"];
  "901": ["0", "8"];
  "911": ["0", "7"];
  "921": ["0", "6"];
  "931": ["0", "5"];
  "941": ["0", "4"];
  "951": ["0", "3"];
  "961": ["0", "2"];
  "971": ["0", "1"];
  "981": ["0", "0"];
  "991": ["1", "9"];
};

export type SubDigit<
  T extends Digit,
  U extends Digit,
  Carry extends "1" | "0"
> = `${T}${U}${Carry}` extends keyof SubtractorTable
  ? SubtractorTable[`${T}${U}${Carry}`]
  : never;

// type FuelEmpty = "ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥";

type Bounce<
  T extends Digit[],
  U extends Digit[],
  Subtracted extends ["0" | "1", Digit],
  Acc extends Digit[]
  // Fuel extends string
> = SubDigits<T, U, Subtracted[0], [Subtracted[1], ...Acc] /*, Fuel */>;

export type SubDigits<
  T extends Digit[],
  U extends Digit[],
  Carry extends "1" | "0" = "0",
  Acc extends Digit[] = []
  // Fuel extends string = ""
> = /*Fuel extends FuelEmpty
  ? { ERROR: "Too much recursion" }
  : */ T extends []
  ? U extends []
    ? // Both T and U are empty, return the result
      Carry extends "1"
      ? never // negative result
      : DropLeadingZeroDigits<Acc>
    : // T is empty, U is not - continue with 0 as T
    U extends [...infer U_ extends Digit[], infer Un extends Digit]
    ? Bounce<[], U_, SubDigit<"0", Un, Carry>, Acc /* , `${Fuel}ðŸ”¥` */>
    : never // Something wrong with U
  : T extends [...infer T_ extends Digit[], infer Tn extends Digit]
  ? U extends []
    ? // T is not empty, U is - continue with 0 as U
      Bounce<T_, [], SubDigit<Tn, "0", Carry>, Acc /* , `${Fuel}ðŸ”¥` */>
    : // Both T and U contain digits
    U extends [...infer U_ extends Digit[], infer Un extends Digit]
    ? Bounce<T_, U_, SubDigit<Tn, Un, Carry>, Acc /* , `${Fuel}ðŸ”¥` */>
    : never // `Something wrong with U
  : never; // `Something wrong with T`

export type Subtract<
  T extends `${number}`,
  U extends `${number}`
> = DropLeadingZero<Join<SubDigits<ToDigits<T>, ToDigits<U>>, "0">>;

export type AbsDifference<
  T extends `${number}`,
  U extends `${number}`
> = Compare<T, U> extends 1 ? Subtract<T, U> : Subtract<U, T>;
